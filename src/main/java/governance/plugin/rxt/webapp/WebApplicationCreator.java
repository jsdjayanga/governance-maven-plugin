package governance.plugin.rxt.webapp;

import governance.plugin.common.GovernanceSOAPMessageCreator;
import governance.plugin.rxt.AbstractAssetCreator;
import governance.plugin.util.PathNameResolver;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;

import java.util.Map;

/**
 * Created by jayanga on 2/11/14.
 */
public class WebApplicationCreator extends AbstractAssetCreator {

    public static final String GREG_WEBAPP_RESOURCE_PATH = "/trunk/webapps/";

    Log logger;
    public WebApplicationCreator(Log logger, String gregServiceUrl) throws MojoExecutionException {
        super(gregServiceUrl, "Webapp.WebappHttpsSoap12Endpoint");
        this.logger = logger;
    }

    public boolean create(Map<String, String> parameters) throws MojoExecutionException {
        String name = parameters.get("name");
        String namespace = parameters.get("namespace");
        String serviceclass = parameters.get("serviceclass");
        String displayname = parameters.get("displayname");
        String version = parameters.get("version");
        String description = parameters.get("description");

        description = (description != null && description != "")? description: "generated by maven-governance-plugin.";

        String servicePath = getResourcePath(new String[]{name, namespace});

        String createWebAppRequst =
                GovernanceSOAPMessageCreator.createAddWebAppRequest(name
                        , namespace
                        , serviceclass
                        , displayname
                        , version
                        , description);

        logger.debug("Web App creation request. [" + createWebAppRequst + "]");

        boolean isServiceCreated = super.createAsset(servicePath, createWebAppRequst);

        if (logger.isInfoEnabled()){
            if (isServiceCreated){
                logger.info("Request sent to create Web Application: "+ name);
            }else{
                logger.info("Web Application already available: " + name);
            }
        }

        return isServiceCreated;
    }

    @Override
    public boolean create(Object[] parameters) throws MojoExecutionException {
        return false;
    }

    @Override
    public String getResourcePath(String[] parameters) throws MojoExecutionException {
        String name = parameters[0];
        String namespace = parameters[1];

        return PathNameResolver.getResourcePath(name, namespace, WebApplicationCreator.GREG_WEBAPP_RESOURCE_PATH);
    }
}
